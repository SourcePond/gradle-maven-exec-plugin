/*
 * Copyright 2016 Dmitry Korotych.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        if (JavaVersion.current().isJava8Compatible()) {
//            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
            classpath 'ru.vyarus:gradle-quality-plugin:2.0.0'
        }
    }
}

plugins {
    id "com.gradle.plugin-publish" version "0.9.7"
    id 'net.saliman.cobertura' version '2.5.4'
    id 'net.researchgate.release' version '2.6.0'
    id "nebula.info" version "3.6.0"
    id "com.github.hierynomus.license" version "0.14.0"
}

group 'com.github.dkorotych.gradle.maven.exec'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'idea'
if (buildscript.configurations.classpath.find { it.name =~ /^gradle-quality-plugin.+$/ } != null) {
//    apply plugin: "org.sonarqube"
    apply plugin: 'ru.vyarus.quality'

    quality {
        configDir = rootProject.file('config')
    }

    afterEvaluate {
        codenarc {
            configFile = rootProject.file('config/codenarc/codenarc.groovy')
        }
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "commons-lang:commons-lang:2.6"
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4', {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:3.2.4'
    testCompile 'org.objenesis:objenesis:2.4'
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = sourceSets.main.allSource.srcDirs
}

license {
    header project.file('config/license-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.developers = 'Dmitry Korotych'
    skipExistingHeaders true
    strictCheck true
    exclude "**/fixtures/**"
}

pluginBundle {
    website = 'https://github.com/dkorotych/gradle-maven-exec-plugin'
    vcsUrl = 'https://github.com/dkorotych/gradle-maven-exec-plugin'
    description = 'Gradle plugin which provides an Maven exec task'
    tags = ['maven', 'exec', 'cross-platform']

    plugins {
        mavenExecPlugin {
            id = 'com.github.dkorotych.gradle-maven-exec'
            displayName = 'Gradle Maven Exec Plugin'
        }
    }
}

groovydoc {
    link 'http://docs.oracle.com/javase/7/docs/api/', 'java.', 'org.xml.', 'javax.', 'org.xml.'
    link "https://docs.gradle.org/${gradle.gradleVersion}/javadoc/", 'org.gradle'
    link "http://docs.groovy-lang.org/${GroovySystem.version}/html/gapi/",
            'groovy', 'org.apache.commons.cli', 'org.codehaus.groovy'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

idea {
    project {
        vcs = 'Git'
        module {
            downloadJavadoc = true
            downloadSources = true
        }
        ipr {
            withXml {
                def node = it.asNode()

                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}

cleanIdea.doLast {
    delete file('.idea')
}

updateVersion.doFirst {
    def file = file('README.md')
    def content = file.text
    def versionPattern = /\d+(?:\.\d+)+/
    content = content.replaceAll("id \"com.github.dkorotych.gradle-maven-exec\" version \"${versionPattern}\"",
            "id \"com.github.dkorotych.gradle-maven-exec\" version \"${version}\"")
    content = content.replaceAll("gradle-maven-exec-plugin:${versionPattern}",
            "gradle-maven-exec-plugin:${version}")
    file.text = content
}

//task generateMetricsPart {
//    def readmeFile = file('README.md')
//    def content = readmeFile.text
//    def header = '## Metrics'
//    def lastSpacesPattern = /\s+$/
//    def model = [
//            'header': header,
//            'template': 'FLAT',
//            'key': "${rootProject.group}:${rootProject.name}",
//            'metric': [
//                    'coverage',
//                    'bugs',
//                    'complexity',
//                    'code_smells',
//                    'vulnerabilities',
//                    'tests',
//                    'test_success_density',
//                    'violations',
//                    'ncloc',
//                    'lines'
//            ]
//    ]
//    def templateText = '''
//$header
//[![SonarQube Quality Gate](https://sonarqube.com/api/badges/gate?key=$key&template=$template)](https://sonarqube.com/dashboard?id=$key)
//<%
//metric.each {
//out.println("[![SonarQube ${it.capitalize().replaceAll('_', ' ')}](https://sonarqube.com/api/badges/measure?metric=${it}&key=$key&template=$template)](https://sonarqube.com/component_measures/metric/${it}/list?id=$key)")
//}
//%>
//'''.replaceAll(lastSpacesPattern, '')
//    def template = new SimpleTemplateEngine().createTemplate(templateText)
//    Writable metrics = template.make(model)
//    def metricsIndex = content.indexOf(header)
//    if (metricsIndex > 0) {
//        content = content.take(metricsIndex).replaceAll(lastSpacesPattern, '')
//    }
//    content += metrics
//    readmeFile.text = content
//}

task realUseCaseTest(type: GradleBuild) {
    dependsOn 'install'
    group = 'verification'
    buildFile = file('useCase.gradle')
    tasks = ['checkMavenApplication', 'checkMavenApplication2']
}
