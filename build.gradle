buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.6"
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.3.2'
    id 'net.researchgate.release' version '2.3.5'
    id "org.sonarqube" version "2.2"
}

group 'com.github.dkorotych.gradle.maven.exec'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'codenarc'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'idea'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4', {
        exclude module: 'groovy-all'
    }
}

codenarc {
    configFile = rootProject.file('config/codenarc/codenarc.groovy')
    reportFormat = 'xml'
}
codenarcTest.enabled = false

cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = sourceSets.main.allSource.srcDirs
}

pluginBundle {
    website = 'https://github.com/dkorotych/gradle-maven-exec-plugin'
    vcsUrl = 'https://github.com/dkorotych/gradle-maven-exec-plugin'
    description = 'Gradle plugin which provides an Maven exec task'
    tags = ['maven', 'exec', 'cross-platform']

    plugins {
        mavenExecPlugin {
            id = 'com.github.dkorotych.gradle-maven-exec'
            displayName = 'Gradle Maven Exec Plugin'
        }
    }
}

groovydoc {
    link 'http://docs.oracle.com/javase/8/docs/api/', 'java.', 'org.xml.', 'javax.', 'org.xml.'
    link "https://docs.gradle.org/${gradle.gradleVersion}/javadoc/", 'org.gradle'
    link "http://docs.groovy-lang.org/${GroovySystem.version}/html/gapi/",
            'groovy', 'org.apache.commons.cli', 'org.codehaus.groovy'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

afterReleaseBuild.dependsOn publishPlugins

idea {
    project {
        vcs = 'Git'
        module {
            downloadJavadoc = true
            downloadSources = true
        }
        ipr {
            withXml {
                def node = it.asNode()

                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}

cleanIdea.doLast {
    delete file('.idea')
}
